{
    "pipes": [],
    "interfaces": [
        {
            "name": "AppState",
            "id": "interface-AppState-3c06fa784491960f011ec35a20dad188",
            "file": "src/app/core/app.reducer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ActionReducerMap, MetaReducer } from '@ngrx/store';\n\nimport { environment } from '../../environments/environment';\n\nexport interface AppState {}\n\nexport const reducers: ActionReducerMap<AppState> = {};\n\nexport const metaReducers: MetaReducer<AppState>[] = !environment.production ? [] : [];\n",
            "properties": [],
            "indexSignatures": [],
            "methods": []
        },
        {
            "name": "Block",
            "id": "interface-Block-824d6c00a02d577e6ddf4e3830cbf159",
            "file": "src/app/modules/status/models/block.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { BlockAttributes } from './block-attributes';\r\n\r\nexport interface Block {\r\n  id: string;\r\n  type: string;\r\n  attributes: BlockAttributes;\r\n}\r\n",
            "properties": [
                {
                    "name": "attributes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BlockAttributes",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "BlockAttributes",
            "id": "interface-BlockAttributes-87780641c4256f0bff894c68b76eee0b",
            "file": "src/app/modules/status/models/block-attributes.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface BlockAttributes {\r\n  index: number;\r\n  timestamp: number;\r\n  data: string;\r\n  'previous-hash': string;\r\n  hash: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "hash",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "index",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "previous-hash",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "timestamp",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "Blocks",
            "id": "interface-Blocks-244d03ee8991af864f3031f429e6a785",
            "file": "src/app/modules/status/services/node.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\n\r\nimport { Block, Status } from '../models';\r\n\r\nconst API_SEGMENT = 'api/v1';\r\n\r\ninterface Blocks {\r\n  data: Block[];\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class NodeService {\r\n  constructor(private http: HttpClient) {}\r\n\r\n  public getStatus(url: string): Observable<Status> {\r\n    return this.http.get<Status>(`${url}/${API_SEGMENT}/status`);\r\n  }\r\n\r\n  public async getBlocks(url: string): Promise<Block[]> {\r\n    return await this.http\r\n      .get<Blocks>(`${url}/${API_SEGMENT}/blocks`)\r\n      .pipe(map(blocks => blocks.data))\r\n      .toPromise();\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Block[]",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "Node",
            "id": "interface-Node-c4e3878586b5b5d08f842ab98f8a5b6f",
            "file": "src/app/modules/status/models/node.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Node {\r\n  id: number;\r\n  url: string;\r\n  name: string;\r\n  status?: string;\r\n  isLoading: boolean;\r\n  isOnline?: boolean;\r\n  isExpanded: boolean;\r\n}\r\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "isExpanded",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "isLoading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "isOnline",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "status",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "Status",
            "id": "interface-Status-87d48c2f1c82cf151cb08a9691ba0836",
            "file": "src/app/modules/status/models/status.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Status {\r\n  node_name: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "node_name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "StatusState",
            "id": "interface-StatusState-33cdea418452247c4d9f73fdee7874b3",
            "file": "src/app/modules/status/store/status.state.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { environment } from 'src/environments/environment';\n\nimport { Node } from '../models';\n\nexport const statusFeatureKey = 'status';\n\nexport interface StatusState {\n  nodes: Node[];\n}\n\nexport const initialStatusState: StatusState = {\n  nodes: initNodes()\n};\n\nfunction initNodes(): Node[] {\n  return environment.serverUrls.map((serverUrl, index) => {\n    return {\n      id: index + 1,\n      name: `Node ${index + 1}`,\n      url: serverUrl,\n      isOnline: undefined,\n      isLoading: false,\n      isExpanded: false,\n      status: undefined\n    } as Node;\n  });\n}\n",
            "properties": [
                {
                    "name": "nodes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Node[]",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "NodeService",
            "id": "injectable-NodeService-244d03ee8991af864f3031f429e6a785",
            "file": "src/app/modules/status/services/node.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getBlocks",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<Block[]>",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122,
                        129
                    ],
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getStatus",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Status>",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\n\r\nimport { Block, Status } from '../models';\r\n\r\nconst API_SEGMENT = 'api/v1';\r\n\r\ninterface Blocks {\r\n  data: Block[];\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class NodeService {\r\n  constructor(private http: HttpClient) {}\r\n\r\n  public getStatus(url: string): Observable<Status> {\r\n    return this.http.get<Status>(`${url}/${API_SEGMENT}/status`);\r\n  }\r\n\r\n  public async getBlocks(url: string): Promise<Block[]> {\r\n    return await this.http\r\n      .get<Blocks>(`${url}/${API_SEGMENT}/blocks`)\r\n      .pipe(map(blocks => blocks.data))\r\n      .toPromise();\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "StatusEffects",
            "id": "injectable-StatusEffects-6e77d3b09604a94950c2ddbc2cabddec",
            "file": "src/app/modules/status/store/status.effects.ts",
            "properties": [
                {
                    "name": "loadNodes$",
                    "defaultValue": "createEffect(() => {\n    return this.actions$.pipe(\n      ofType(statusActions.loadNodes),\n      withLatestFrom(this.statusFacade.select.nodes),\n      mergeMap(([action, nodes]) =>\n        nodes.map(node => statusActions.loadNodeStatus({ nodeId: node.id, url: node.url }))\n      )\n    );\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "loadNodeStatus$",
                    "defaultValue": "createEffect(() => {\n    return this.actions$.pipe(\n      ofType(statusActions.loadNodeStatus),\n      mergeMap(action =>\n        this.nodeService.getStatus(action.payload.url).pipe(\n          map(status =>\n            statusActions.loadNodeStatusSuccess({ status, nodeId: action.payload.nodeId })\n          ),\n          catchError(error =>\n            of(statusActions.loadNodeStatusFailure({ nodeId: action.payload.nodeId }))\n          )\n        )\n      )\n    );\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { of } from 'rxjs';\nimport { catchError, map, mergeMap, withLatestFrom } from 'rxjs/operators';\n\nimport { Injectable } from '@angular/core';\nimport { getActions } from '@ngrx-ducks/core';\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\n\nimport { NodeService } from '../services/node.service';\nimport { StatusFacade } from './status.facade';\n\nconst statusActions = getActions(StatusFacade);\n@Injectable()\nexport class StatusEffects {\n  constructor(\n    private actions$: Actions,\n    private statusFacade: StatusFacade,\n    private nodeService: NodeService\n  ) {}\n\n  loadNodes$ = createEffect(() => {\n    return this.actions$.pipe(\n      ofType(statusActions.loadNodes),\n      withLatestFrom(this.statusFacade.select.nodes),\n      mergeMap(([action, nodes]) =>\n        nodes.map(node => statusActions.loadNodeStatus({ nodeId: node.id, url: node.url }))\n      )\n    );\n  });\n\n  loadNodeStatus$ = createEffect(() => {\n    return this.actions$.pipe(\n      ofType(statusActions.loadNodeStatus),\n      mergeMap(action =>\n        this.nodeService.getStatus(action.payload.url).pipe(\n          map(status =>\n            statusActions.loadNodeStatusSuccess({ status, nodeId: action.payload.nodeId })\n          ),\n          catchError(error =>\n            of(statusActions.loadNodeStatusFailure({ nodeId: action.payload.nodeId }))\n          )\n        )\n      )\n    );\n  });\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "statusFacade",
                        "type": "StatusFacade",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "nodeService",
                        "type": "NodeService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "statusFacade",
                        "type": "StatusFacade",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "nodeService",
                        "type": "NodeService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [
        {
            "name": "StatusFacade",
            "id": "class-StatusFacade-1d988e654912061d657caf66a32dc29d",
            "file": "src/app/modules/status/store/status.facade.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import produce from 'immer';\nimport { environment } from 'src/environments/environment';\n\nimport { bindSelectors, createDuck, getReducer, StoreFacade } from '@ngrx-ducks/core';\nimport { MetaReducer } from '@ngrx/store';\n\nimport { Status } from '../models';\nimport * as selectors from './status.selectors';\nimport { initialStatusState, statusFeatureKey, StatusState } from './status.state';\n\n@StoreFacade()\nexport class StatusFacade {\n  select = bindSelectors(selectors);\n\n  loadNodes = createDuck('[NodeList] Load Nodes');\n\n  loadNodeStatus = createDuck(\n    '[Effect] Load Node Status',\n    (state: StatusState, payload: { nodeId: number; url: string }) =>\n      produce(state, draft => {\n        const index = payload.nodeId - 1;\n        draft.nodes[index].isLoading = true;\n      })\n  );\n\n  loadNodeStatusSuccess = createDuck(\n    '[Effect] Load Node Success',\n    (state: StatusState, payload: { status: Status; nodeId: number }) =>\n      produce(state, draft => {\n        const index = payload.nodeId - 1;\n        draft.nodes[index].isLoading = false;\n        draft.nodes[index].name = payload.status?.node_name\n          ? payload.status.node_name\n          : state.nodes[index].name;\n\n        draft.nodes[index].isOnline = !!payload.status;\n      })\n  );\n\n  loadNodeStatusFailure = createDuck(\n    '[Effect] Load Node Failure',\n    (state: StatusState, payload: { nodeId: number }) =>\n      produce(state, draft => {\n        const index = payload.nodeId - 1;\n        draft.nodes[index].isLoading = false;\n        draft.nodes[index].isOnline = false;\n        draft.nodes[index].isExpanded = false;\n      })\n  );\n\n  toggleNode = createDuck(\n    '[Node List Component] Toggle Block Information',\n    (state: StatusState, payload: { nodeId: number }) =>\n      produce(state, draft => {\n        const index = payload.nodeId - 1;\n        draft.nodes[index].isExpanded = !state.nodes[index].isExpanded;\n      })\n  );\n}\n\nexport const featureKey = statusFeatureKey;\nexport const metaReducers: MetaReducer<StatusState>[] = !environment.production ? [] : [];\nexport const statusReducer = getReducer(initialStatusState, StatusFacade);\n",
            "properties": [
                {
                    "name": "loadNodes",
                    "defaultValue": "createDuck('[NodeList] Load Nodes')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "loadNodeStatus",
                    "defaultValue": "createDuck(\n    '[Effect] Load Node Status',\n    (state: StatusState, payload: { nodeId: number; url: string }) =>\n      produce(state, draft => {\n        const index = payload.nodeId - 1;\n        draft.nodes[index].isLoading = true;\n      })\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "loadNodeStatusFailure",
                    "defaultValue": "createDuck(\n    '[Effect] Load Node Failure',\n    (state: StatusState, payload: { nodeId: number }) =>\n      produce(state, draft => {\n        const index = payload.nodeId - 1;\n        draft.nodes[index].isLoading = false;\n        draft.nodes[index].isOnline = false;\n        draft.nodes[index].isExpanded = false;\n      })\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "loadNodeStatusSuccess",
                    "defaultValue": "createDuck(\n    '[Effect] Load Node Success',\n    (state: StatusState, payload: { status: Status; nodeId: number }) =>\n      produce(state, draft => {\n        const index = payload.nodeId - 1;\n        draft.nodes[index].isLoading = false;\n        draft.nodes[index].name = payload.status?.node_name\n          ? payload.status.node_name\n          : state.nodes[index].name;\n\n        draft.nodes[index].isOnline = !!payload.status;\n      })\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "select",
                    "defaultValue": "bindSelectors(selectors)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "toggleNode",
                    "defaultValue": "createDuck(\n    '[Node List Component] Toggle Block Information',\n    (state: StatusState, payload: { nodeId: number }) =>\n      produce(state, draft => {\n        const index = payload.nodeId - 1;\n        draft.nodes[index].isExpanded = !state.nodes[index].isExpanded;\n      })\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 51
                }
            ],
            "rawdescription": "\n",
            "methods": [],
            "indexSignatures": []
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-6fc1d27d704db9ad33dfc74dd5e6fd26",
            "file": "src/app/core/containers/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'challenge'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.scss']\r\n})\r\nexport class AppComponent {\r\n  title = 'challenge';\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<app-shell></app-shell>\r\n"
        },
        {
            "name": "BlockDetailComponent",
            "id": "component-BlockDetailComponent-85ceaa80d078b4cb56179445a497f7be",
            "file": "src/app/modules/status/components/block-detail/block-detail.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-block-detail",
            "styleUrls": [
                "./block-detail.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./block-detail.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "block",
                    "defaultValue": "{} as Block",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "Block"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\n\r\nimport { Block } from '../../models';\r\n\r\n@Component({\r\n  selector: 'app-block-detail',\r\n  templateUrl: './block-detail.component.html',\r\n  styleUrls: ['./block-detail.component.scss']\r\n})\r\nexport class BlockDetailComponent {\r\n  @Input() block: Block = {} as Block;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".block-detail {\r\n  &-container {\r\n    background-color: lightgray;\r\n    border-radius: 5px;\r\n  }\r\n\r\n  &-header {\r\n    color: rgb(112, 0, 146);\r\n    font-weight: bold;\r\n  }\r\n\r\n  &-description {\r\n    color: black;\r\n  }\r\n}\r\n",
                    "styleUrl": "./block-detail.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div class=\"block-detail-container p-2 pe-3\">\r\n  <div class=\"block-detail-header\">{{ block.attributes.index | number: '3.0-0' }}</div>\r\n  <div class=\"block-detail-description\">{{ block.attributes.data }}</div>\r\n</div>\r\n"
        },
        {
            "name": "BlockListComponent",
            "id": "component-BlockListComponent-613c2d79a424a4dafc9ad958b20fff60",
            "file": "src/app/modules/status/containers/block-list/block-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-block-list",
            "styleUrls": [
                "./block-list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./block-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "url",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "blocks",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Block[]",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ToastrService } from 'ngx-toastr';\r\nimport { Block } from 'src/app/modules/status/models';\r\n\r\nimport { Component, Input, OnInit } from '@angular/core';\r\n\r\nimport { NodeService } from '../../services/node.service';\r\n\r\n@Component({\r\n  selector: 'app-block-list',\r\n  templateUrl: './block-list.component.html',\r\n  styleUrls: ['./block-list.component.scss']\r\n})\r\nexport class BlockListComponent implements OnInit {\r\n  @Input() url: string = '';\r\n  public blocks: Block[] = [];\r\n\r\n  constructor(private nodeService: NodeService, private toastr: ToastrService) {}\r\n\r\n  async ngOnInit(): Promise<void> {\r\n    try {\r\n      this.blocks = await this.nodeService.getBlocks(this.url);\r\n      this.toastr.success(`Blocks loaded for node ${this.url}`, \"Success\");\r\n    } catch (error) {\r\n      this.toastr.error(`Failed to load Blocks for node ${this.url}`, \"Error\");\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./block-list.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "nodeService",
                        "type": "NodeService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "toastr",
                        "type": "ToastrService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "nodeService",
                        "type": "NodeService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "toastr",
                        "type": "ToastrService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div *ngIf=\"blocks && blocks.length > 0; else noBlocks\">\r\n  <div *ngFor=\"let block of blocks\">\r\n    <div class=\"mb-1\">\r\n      <app-block-detail [block]=\"block\"></app-block-detail>\r\n    </div>\r\n  </div>\r\n</div>\r\n<ng-template #noBlocks>\r\n  <span>Loading blocks...</span>\r\n</ng-template>\r\n"
        },
        {
            "name": "NodeDetailComponent",
            "id": "component-NodeDetailComponent-0d7f4f72799010a377179c2685524f8a",
            "file": "src/app/modules/status/components/node-detail/node-detail.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-node-detail",
            "styleUrls": [
                "./node-detail.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./node-detail.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "node",
                    "defaultValue": "{} as Node",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "Node"
                }
            ],
            "outputsClass": [
                {
                    "name": "toggleExpand",
                    "defaultValue": "new EventEmitter<number>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "onToggle",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\r\n\r\nimport { Node } from '../../models';\r\n\r\n@Component({\r\n  selector: 'app-node-detail',\r\n  templateUrl: './node-detail.component.html',\r\n  styleUrls: ['./node-detail.component.scss']\r\n})\r\nexport class NodeDetailComponent {\r\n  @Input() node: Node = {} as Node;\r\n  @Output() toggleExpand = new EventEmitter<number>();\r\n\r\n  constructor() {}\r\n\r\n  public onToggle(): void {\r\n    this.toggleExpand.emit(this.node.id);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "$padding: 10px 15px;\r\n$border-color: rgb(221, 221, 221);\r\n\r\n.node-detail-container {\r\n  margin-bottom: 10px;\r\n  border: 1px solid $border-color;\r\n  border-radius: 5px;\r\n  box-shadow: 2px 3px lightgray;\r\n\r\n  .header {\r\n    display: grid;\r\n    grid-template-columns: 1fr auto;\r\n    align-items: center;\r\n    padding: $padding;\r\n\r\n    .name {\r\n      font-size: x-large;\r\n    }\r\n\r\n    .url {\r\n      font-size: small;\r\n      color: grey;\r\n    }\r\n\r\n    i {\r\n      color: black;\r\n      cursor: pointer;\r\n\r\n      &.is-expanded {\r\n        transform: rotate(+180deg);\r\n      }\r\n\r\n      &.is-disabled {\r\n        color: lightgray;\r\n        cursor: not-allowed;\r\n      }\r\n    }\r\n\r\n    .expand-button {\r\n      border: 0px;\r\n      background-color: unset;\r\n    }\r\n  }\r\n\r\n  .content {\r\n    padding: $padding;\r\n    display: none;\r\n    user-select: unset;\r\n\r\n    &.is-expanded {\r\n      display: block;\r\n    }\r\n  }\r\n}\r\n",
                    "styleUrl": "./node-detail.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 12
            },
            "templateData": "<div class=\"node-detail-container\">\r\n  <div class=\"header\">\r\n    <div class=\"d-flex justify-content-between\">\r\n      <div>\r\n        <div class=\"name\">{{ node.name }}</div>\r\n        <div class=\"url\">{{ node.url }}</div>\r\n      </div>\r\n      <div class=\"d-flex align-items-center\">\r\n        <app-node-status [isOnline]=\"node.isOnline\" [isLoading]=\"node.isLoading\"></app-node-status>\r\n      </div>\r\n    </div>\r\n    <div>\r\n      <button class=\"expand-button\" (click)=\"onToggle()\" [disabled]=\"!node.isOnline\">\r\n        <i class=\"fa fa-chevron-down\" [class.is-expanded]=\"node.isExpanded\" [class.is-disabled]=\"!node.isOnline\"></i>\r\n      </button>\r\n    </div>\r\n  </div>\r\n  <div class=\"content\" [class.is-expanded]=\"node.isExpanded\">\r\n    <app-block-list *ngIf=\"node.isExpanded\" [url]=\"node.url\"></app-block-list>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "NodeListComponent",
            "id": "component-NodeListComponent-44938972161fcca5996c6a052b573a3f",
            "file": "src/app/modules/status/containers/node-list/node-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-node-list",
            "styleUrls": [
                "./node-list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./node-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isSomeLoading$",
                    "defaultValue": "new Observable<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "nodes$",
                    "defaultValue": "new Observable<Node[]>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Node[]>",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                },
                {
                    "name": "onToggleExpand",
                    "args": [
                        {
                            "name": "nodeId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "nodeId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Observable } from 'rxjs';\r\n\r\nimport { Component, OnInit } from '@angular/core';\r\n\r\nimport { Node } from '../../models';\r\nimport { StatusFacade } from '../../store/status.facade';\r\n\r\n@Component({\r\n  selector: 'app-node-list',\r\n  templateUrl: './node-list.component.html',\r\n  styleUrls: ['./node-list.component.scss']\r\n})\r\nexport class NodeListComponent implements OnInit {\r\n  public nodes$: Observable<Node[]> = new Observable<Node[]>();\r\n  public isSomeLoading$: Observable<boolean> = new Observable<boolean>();\r\n\r\n  constructor(private statusFacade: StatusFacade) {}\r\n\r\n  async ngOnInit(): Promise<void> {\r\n    this.nodes$ = this.statusFacade.select.nodes;\r\n    this.isSomeLoading$ = this.statusFacade.select.isSomeLoading;\r\n    this.statusFacade.loadNodes.dispatch();\r\n  }\r\n\r\n  public onToggleExpand(nodeId: number) {\r\n    this.statusFacade.toggleNode.dispatch({ nodeId });\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".node-list-container {\r\n  @mixin box-shadow {\r\n    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.12), 0 1px 2px rgba(0, 0, 0, 0.24);\r\n    transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);\r\n  }\r\n}\r\n",
                    "styleUrl": "./node-list.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "statusFacade",
                        "type": "StatusFacade",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "statusFacade",
                        "type": "StatusFacade",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<h2>Nodes <i class=\"fa fa-spinner fa-pulse fa-fw\" *ngIf=\"isSomeLoading$ | async\"></i></h2>\r\n<div class=\"node-list-container\">\r\n  <app-node-detail *ngFor=\"let node of nodes$ | async\" [node]=\"node\" (toggleExpand)=\"onToggleExpand($event)\"></app-node-detail>\r\n</div>\r\n"
        },
        {
            "name": "NodeStatusComponent",
            "id": "component-NodeStatusComponent-487308e8a9a2c8ebf2cee784c1a4dd2b",
            "file": "src/app/modules/status/components/node-status/node-status.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-node-status",
            "styleUrls": [
                "./node-status.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./node-status.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "isLoading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "boolean"
                },
                {
                    "name": "isOnline",
                    "defaultValue": "undefined",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "boolean"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "statusText",
                    "defaultValue": "new Map([\r\n    [true, 'online'],\r\n    [false, 'offline'],\r\n    [undefined, 'unknown']\r\n  ])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-node-status',\r\n  templateUrl: './node-status.component.html',\r\n  styleUrls: ['./node-status.component.scss']\r\n})\r\nexport class NodeStatusComponent {\r\n  @Input() isOnline?: boolean = undefined;\r\n  @Input() isLoading: boolean = false;\r\n\r\n  public statusText = new Map([\r\n    [true, 'online'],\r\n    [false, 'offline'],\r\n    [undefined, 'unknown']\r\n  ]);\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'src/styles.scss';\r\n\r\n@keyframes ellipsis1 {\r\n  0% {\r\n    transform: scale(0);\r\n  }\r\n  100% {\r\n    transform: scale(1);\r\n  }\r\n}\r\n\r\n@keyframes ellipsis2 {\r\n  0% {\r\n    transform: translate(0, 0);\r\n  }\r\n  100% {\r\n    transform: translate(9px, 0);\r\n  }\r\n}\r\n\r\n@keyframes ellipsis3 {\r\n  0% {\r\n    transform: scale(1);\r\n  }\r\n  100% {\r\n    transform: scale(0);\r\n  }\r\n}\r\n\r\n.status-container {\r\n  min-width: 100px;\r\n}\r\n\r\n.status-text {\r\n  text-transform: uppercase;\r\n}\r\n\r\n.status-circle {\r\n  height: 10px;\r\n  width: 10px;\r\n  border-radius: 50%;\r\n  border: 1px solid black;\r\n}\r\n\r\n.status-circle-success {\r\n  background-color: $success-color;\r\n}\r\n\r\n.status-circle-failure {\r\n  background-color: $danger-color;\r\n}\r\n\r\n.loading-ellipsis {\r\n  position: relative;\r\n  width: 38px;\r\n  height: 19px;\r\n  & div {\r\n    position: absolute;\r\n    top: 7px;\r\n    width: 5px;\r\n    height: 5px;\r\n    border-radius: 50%;\r\n    background: $warning-color;\r\n    animation-timing-function: cubic-bezier(0, 1, 1, 0);\r\n  }\r\n  & div:nth-child(1) {\r\n    left: 6px;\r\n    animation: ellipsis1 0.6s infinite;\r\n  }\r\n  & div:nth-child(2) {\r\n    left: 6px;\r\n    animation: ellipsis2 0.6s infinite;\r\n  }\r\n  & div:nth-child(3) {\r\n    left: 16px;\r\n    animation: ellipsis2 0.6s infinite;\r\n  }\r\n  & div:nth-child(4) {\r\n    left: 25px;\r\n    animation: ellipsis3 0.6s infinite;\r\n  }\r\n}\r\n",
                    "styleUrl": "./node-status.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div *ngIf=\"isLoading; else loaded\">\r\n  <div class=\"loading-ellipsis\">\r\n    <div></div>\r\n    <div></div>\r\n  </div>\r\n</div>\r\n\r\n<ng-template #loaded>\r\n  <div class=\"d-inline-flex align-items-center status-container\">\r\n    <div class=\"status-circle\" [ngClass]=\"{ 'status-circle-success': isOnline, 'status-circle-failure': isOnline === false }\"></div>\r\n    <div class=\"status-text p-2\">{{ statusText.get(isOnline) }}</div>\r\n  </div>\r\n</ng-template>\r\n"
        },
        {
            "name": "ShellComponent",
            "id": "component-ShellComponent-191a8bace19b0ab064e0f7b0198523b3",
            "file": "src/app/core/containers/shell/shell.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-shell",
            "styleUrls": [
                "./shell.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./shell.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-shell',\r\n  templateUrl: './shell.component.html',\r\n  styleUrls: ['./shell.component.scss']\r\n})\r\nexport class ShellComponent {}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./shell.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div class=\"container\">\r\n  <router-outlet></router-outlet>\r\n</div>\r\n"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "id": "module-AppModule-7f08e768e33133d59a68e3c29ea1cd55",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import { HttpClientModule } from '@angular/common/http';\r\nimport { NgModule } from '@angular/core';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { EffectsModule } from '@ngrx/effects';\r\nimport { StoreModule } from '@ngrx/store';\r\nimport { StoreDevtoolsModule } from '@ngrx/store-devtools';\r\n\r\nimport { environment } from '../environments/environment';\r\nimport { AppRoutingModule } from './app.routing.module';\r\nimport { metaReducers, reducers } from './core/app.reducer';\r\nimport { AppComponent } from './core/containers/app/app.component';\r\nimport { CoreModule } from './core/core.module';\r\nimport { SharedModule } from './shared/shared.module';\r\n\r\n@NgModule({\r\n  declarations: [],\r\n  imports: [\r\n    BrowserModule,\r\n    BrowserAnimationsModule,\r\n    HttpClientModule,\r\n    AppRoutingModule,\r\n    SharedModule,\r\n    CoreModule,\r\n    StoreModule.forRoot(reducers, { metaReducers }),\r\n    !environment.production ? StoreDevtoolsModule.instrument() : [],\r\n    EffectsModule.forRoot([])\r\n  ],\r\n  providers: [],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "!environment"
                        },
                        {
                            "name": "AppRoutingModule"
                        },
                        {
                            "name": "CoreModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-83c1de994f8235ddb7bbf278db3353c8",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nconst routes: Routes = [\n  {\n    path: '',\n    loadChildren: () => \"import('./modules/status/status.module').then(m => m.StatusModule)\"\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes, {})],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CoreModule",
            "id": "module-CoreModule-9eff7b6673a6073b89256a22eac6e5bc",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/core/core.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\n\nimport { SharedModule } from '../shared/shared.module';\nimport { AppComponent } from './containers/app/app.component';\nimport { ShellComponent } from './containers/shell/shell.component';\n\n@NgModule({\n  declarations: [AppComponent, ShellComponent],\n  imports: [CommonModule, SharedModule, RouterModule],\n  exports: [AppComponent, ShellComponent]\n})\nexport class CoreModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "ShellComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "ShellComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SharedModule",
            "id": "module-SharedModule-0137e07fe564108d111f604440407da9",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/shared/shared.module.ts",
            "methods": [],
            "sourceCode": "import { ToastrModule } from 'ngx-toastr';\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nconst TOASTR_CONFIG = {\n  timeOut: 2000,\n  positionClass: 'toast-bottom-right',\n  preventDuplicates: true\n};\n\n@NgModule({\n  declarations: [],\n  imports: [\n    CommonModule,\n    ToastrModule.forRoot(TOASTR_CONFIG)\n  ],\n  exports: [ToastrModule]\n})\nexport class SharedModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "StatusModule",
            "id": "module-StatusModule-9346702f8ba3d639542b1dbe88ef64ac",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/status/status.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\n\nimport { SharedModule } from '../../shared/shared.module';\nimport { BlockDetailComponent, NodeDetailComponent, NodeStatusComponent } from './components';\nimport { BlockListComponent, NodeListComponent } from './containers';\nimport { StatusRoutingModule } from './status.routing.module';\nimport { StatusEffects } from './store/status.effects';\nimport * as statusFacade from './store/status.facade';\n\nconst COMPONENTS = [\n  NodeListComponent,\n  NodeDetailComponent,\n  BlockListComponent,\n  BlockDetailComponent,\n  NodeStatusComponent\n];\n\n@NgModule({\n  declarations: [...COMPONENTS],\n  imports: [\n    CommonModule,\n    SharedModule,\n    StatusRoutingModule,\n    StoreModule.forFeature(statusFacade.featureKey, statusFacade.statusReducer, {\n      metaReducers: statusFacade.metaReducers\n    }),\n    EffectsModule.forFeature([StatusEffects])\n  ]\n})\nexport class StatusModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "BlockDetailComponent"
                        },
                        {
                            "name": "BlockListComponent"
                        },
                        {
                            "name": "NodeDetailComponent"
                        },
                        {
                            "name": "NodeListComponent"
                        },
                        {
                            "name": "NodeStatusComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "SharedModule"
                        },
                        {
                            "name": "StatusRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "StatusRoutingModule",
            "id": "module-StatusRoutingModule-27bc3a8d35647c97bf715b81245b2802",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/status/status.routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nimport { NodeListComponent } from './containers/node-list/node-list.component';\n\nconst routes: Routes = [{ path: '', component: NodeListComponent }];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class StatusRoutingModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "API_SEGMENT",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/status/services/node.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'api/v1'"
            },
            {
                "name": "COMPONENTS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/status/status.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  NodeListComponent,\n  NodeDetailComponent,\n  BlockListComponent,\n  BlockDetailComponent,\n  NodeStatusComponent\n]"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  production: true\r\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  production: false,\r\n  serverUrls: [\r\n    'https://thawing-springs-53971.herokuapp.com',\r\n    'https://secret-lowlands-62331.herokuapp.com',\r\n    'https://calm-anchorage-82141.herokuapp.com',\r\n    'http://localhost:3002'\r\n  ]\r\n}"
            },
            {
                "name": "featureKey",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/status/store/status.facade.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "statusFeatureKey"
            },
            {
                "name": "initialStatusState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/status/store/status.state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StatusState",
                "defaultValue": "{\n  nodes: initNodes()\n}"
            },
            {
                "name": "isSomeLoading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/status/store/status.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(nodes, state => state.some(item => item.isLoading))"
            },
            {
                "name": "metaReducers",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/app.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "MetaReducer[]",
                "defaultValue": "!environment.production ? [] : []"
            },
            {
                "name": "metaReducers",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/status/store/status.facade.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "MetaReducer[]",
                "defaultValue": "!environment.production ? [] : []"
            },
            {
                "name": "nodes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/status/store/status.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(selectStatus, state => state.nodes)"
            },
            {
                "name": "reducers",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/app.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ActionReducerMap<AppState>",
                "defaultValue": "{}"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type"
            },
            {
                "name": "selectStatus",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/status/store/status.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createFeatureSelector<StatusState>(statusFeatureKey)"
            },
            {
                "name": "statusActions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/status/store/status.effects.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "getActions(StatusFacade)"
            },
            {
                "name": "statusFeatureKey",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/status/store/status.state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'status'"
            },
            {
                "name": "statusReducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/status/store/status.facade.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "getReducer(initialStatusState, StatusFacade)"
            },
            {
                "name": "TOASTR_CONFIG",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/shared.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  timeOut: 2000,\n  positionClass: 'toast-bottom-right',\n  preventDuplicates: true\n}"
            }
        ],
        "functions": [
            {
                "name": "initNodes",
                "file": "src/app/modules/status/store/status.state.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [],
                "returnType": "Node[]"
            }
        ],
        "typealiases": [],
        "enumerations": [],
        "groupedVariables": {
            "src/app/modules/status/services/node.service.ts": [
                {
                    "name": "API_SEGMENT",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/status/services/node.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'api/v1'"
                }
            ],
            "src/app/modules/status/status.module.ts": [
                {
                    "name": "COMPONENTS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/status/status.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  NodeListComponent,\n  NodeDetailComponent,\n  BlockListComponent,\n  BlockDetailComponent,\n  NodeStatusComponent\n]"
                }
            ],
            "src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  production: true\r\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  production: false,\r\n  serverUrls: [\r\n    'https://thawing-springs-53971.herokuapp.com',\r\n    'https://secret-lowlands-62331.herokuapp.com',\r\n    'https://calm-anchorage-82141.herokuapp.com',\r\n    'http://localhost:3002'\r\n  ]\r\n}"
                }
            ],
            "src/app/modules/status/store/status.facade.ts": [
                {
                    "name": "featureKey",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/status/store/status.facade.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "statusFeatureKey"
                },
                {
                    "name": "metaReducers",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/status/store/status.facade.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MetaReducer[]",
                    "defaultValue": "!environment.production ? [] : []"
                },
                {
                    "name": "statusReducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/status/store/status.facade.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "getReducer(initialStatusState, StatusFacade)"
                }
            ],
            "src/app/modules/status/store/status.state.ts": [
                {
                    "name": "initialStatusState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/status/store/status.state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StatusState",
                    "defaultValue": "{\n  nodes: initNodes()\n}"
                },
                {
                    "name": "statusFeatureKey",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/status/store/status.state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'status'"
                }
            ],
            "src/app/modules/status/store/status.selectors.ts": [
                {
                    "name": "isSomeLoading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/status/store/status.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(nodes, state => state.some(item => item.isLoading))"
                },
                {
                    "name": "nodes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/status/store/status.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(selectStatus, state => state.nodes)"
                },
                {
                    "name": "selectStatus",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/status/store/status.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createFeatureSelector<StatusState>(statusFeatureKey)"
                }
            ],
            "src/app/core/app.reducer.ts": [
                {
                    "name": "metaReducers",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/app.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MetaReducer[]",
                    "defaultValue": "!environment.production ? [] : []"
                },
                {
                    "name": "reducers",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/app.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ActionReducerMap<AppState>",
                    "defaultValue": "{}"
                }
            ],
            "src/app/modules/status/store/status.effects.ts": [
                {
                    "name": "statusActions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/status/store/status.effects.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "getActions(StatusFacade)"
                }
            ],
            "src/app/shared/shared.module.ts": [
                {
                    "name": "TOASTR_CONFIG",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/shared.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  timeOut: 2000,\n  positionClass: 'toast-bottom-right',\n  preventDuplicates: true\n}"
                }
            ]
        },
        "groupedFunctions": {
            "src/app/modules/status/store/status.state.ts": [
                {
                    "name": "initNodes",
                    "file": "src/app/modules/status/store/status.state.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [],
                    "returnType": "Node[]"
                }
            ]
        },
        "groupedEnumerations": {},
        "groupedTypeAliases": {}
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app.routing.module.ts",
                "module": "AppRoutingModule",
                "children": [
                    {
                        "path": "",
                        "loadChildren": "./modules/status/status.module#StatusModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [
                                    {
                                        "name": "routes",
                                        "filename": "src/app/modules/status/status.routing.module.ts",
                                        "module": "StatusRoutingModule",
                                        "children": [
                                            {
                                                "path": "",
                                                "component": "NodeListComponent"
                                            }
                                        ],
                                        "kind": "module"
                                    }
                                ],
                                "module": "StatusModule"
                            }
                        ]
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/core/app.reducer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AppState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/app.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "metaReducers",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/app.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "reducers",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/containers/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/core/containers/shell/shell.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ShellComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/status/components/block-detail/block-detail.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BlockDetailComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/status/components/node-detail/node-detail.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NodeDetailComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/status/components/node-status/node-status.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NodeStatusComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/status/containers/block-list/block-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BlockListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/status/containers/node-list/node-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NodeListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/status/models/block-attributes.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "BlockAttributes",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/status/models/block.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Block",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/status/models/node.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Node",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/status/models/status.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Status",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/status/services/node.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "NodeService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/status/services/node.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Blocks",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/status/services/node.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "API_SEGMENT",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/status/status.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "COMPONENTS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/status/store/status.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "StatusEffects",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/status/store/status.effects.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "statusActions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/status/store/status.facade.ts",
                "type": "class",
                "linktype": "classe",
                "name": "StatusFacade",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/status/store/status.facade.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "featureKey",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/status/store/status.facade.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "metaReducers",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/status/store/status.facade.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "statusReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/status/store/status.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "isSomeLoading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/status/store/status.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "nodes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/status/store/status.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectStatus",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/status/store/status.state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "StatusState",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/status/store/status.state.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "initNodes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/status/store/status.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialStatusState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/status/store/status.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "statusFeatureKey",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/shared.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TOASTR_CONFIG",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}